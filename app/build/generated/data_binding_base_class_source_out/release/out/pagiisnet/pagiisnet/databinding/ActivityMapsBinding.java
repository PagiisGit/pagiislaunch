// Generated by view binder compiler. Do not edit!
package pagiisnet.pagiisnet.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.fragment.app.FragmentContainerView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.mikhaellopez.circularimageview.CircularImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import pagiisnet.pagiisnet.R;

public final class ActivityMapsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ImageView LogSearchIconGo;

  @NonNull
  public final ImageView PAGiiSICON;

  @NonNull
  public final CardView discoverLayout;

  @NonNull
  public final CircularImageView hideMapsPublicPostsCardView;

  @NonNull
  public final CircularImageView hidePublicProfilesCardView;

  @NonNull
  public final CardView iconstand;

  @NonNull
  public final RelativeLayout mainContainer;

  @NonNull
  public final FragmentContainerView map;

  @NonNull
  public final BottomNavigationView mapsBottomNav;

  @NonNull
  public final RecyclerView mapsOnlienUserRecyclerview;

  @NonNull
  public final RecyclerView mapsProfileCategory;

  @NonNull
  public final RecyclerView mapsPublicContentRecyclerView;

  @NonNull
  public final CardView mapsPublicProfilePostsCardView;

  @NonNull
  public final CardView mapsViewOnlineUserCardView;

  @NonNull
  public final CircularImageView nearbyLocation;

  @NonNull
  public final AutoCompleteTextView searchEdittext;

  @NonNull
  public final Spinner searchSpinner;

  @NonNull
  public final LinearLayout searchTextInputLayout;

  private ActivityMapsBinding(@NonNull RelativeLayout rootView, @NonNull ImageView LogSearchIconGo,
      @NonNull ImageView PAGiiSICON, @NonNull CardView discoverLayout,
      @NonNull CircularImageView hideMapsPublicPostsCardView,
      @NonNull CircularImageView hidePublicProfilesCardView, @NonNull CardView iconstand,
      @NonNull RelativeLayout mainContainer, @NonNull FragmentContainerView map,
      @NonNull BottomNavigationView mapsBottomNav, @NonNull RecyclerView mapsOnlienUserRecyclerview,
      @NonNull RecyclerView mapsProfileCategory,
      @NonNull RecyclerView mapsPublicContentRecyclerView,
      @NonNull CardView mapsPublicProfilePostsCardView,
      @NonNull CardView mapsViewOnlineUserCardView, @NonNull CircularImageView nearbyLocation,
      @NonNull AutoCompleteTextView searchEdittext, @NonNull Spinner searchSpinner,
      @NonNull LinearLayout searchTextInputLayout) {
    this.rootView = rootView;
    this.LogSearchIconGo = LogSearchIconGo;
    this.PAGiiSICON = PAGiiSICON;
    this.discoverLayout = discoverLayout;
    this.hideMapsPublicPostsCardView = hideMapsPublicPostsCardView;
    this.hidePublicProfilesCardView = hidePublicProfilesCardView;
    this.iconstand = iconstand;
    this.mainContainer = mainContainer;
    this.map = map;
    this.mapsBottomNav = mapsBottomNav;
    this.mapsOnlienUserRecyclerview = mapsOnlienUserRecyclerview;
    this.mapsProfileCategory = mapsProfileCategory;
    this.mapsPublicContentRecyclerView = mapsPublicContentRecyclerView;
    this.mapsPublicProfilePostsCardView = mapsPublicProfilePostsCardView;
    this.mapsViewOnlineUserCardView = mapsViewOnlineUserCardView;
    this.nearbyLocation = nearbyLocation;
    this.searchEdittext = searchEdittext;
    this.searchSpinner = searchSpinner;
    this.searchTextInputLayout = searchTextInputLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMapsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMapsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_maps, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMapsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LogSearchIconGo;
      ImageView LogSearchIconGo = ViewBindings.findChildViewById(rootView, id);
      if (LogSearchIconGo == null) {
        break missingId;
      }

      id = R.id.PAGiiS_ICON;
      ImageView PAGiiSICON = ViewBindings.findChildViewById(rootView, id);
      if (PAGiiSICON == null) {
        break missingId;
      }

      id = R.id.discoverLayout;
      CardView discoverLayout = ViewBindings.findChildViewById(rootView, id);
      if (discoverLayout == null) {
        break missingId;
      }

      id = R.id.hideMapsPublicPostsCardView;
      CircularImageView hideMapsPublicPostsCardView = ViewBindings.findChildViewById(rootView, id);
      if (hideMapsPublicPostsCardView == null) {
        break missingId;
      }

      id = R.id.hidePublicProfilesCardView;
      CircularImageView hidePublicProfilesCardView = ViewBindings.findChildViewById(rootView, id);
      if (hidePublicProfilesCardView == null) {
        break missingId;
      }

      id = R.id.iconstand;
      CardView iconstand = ViewBindings.findChildViewById(rootView, id);
      if (iconstand == null) {
        break missingId;
      }

      RelativeLayout mainContainer = (RelativeLayout) rootView;

      id = R.id.map;
      FragmentContainerView map = ViewBindings.findChildViewById(rootView, id);
      if (map == null) {
        break missingId;
      }

      id = R.id.maps_bottom_nav;
      BottomNavigationView mapsBottomNav = ViewBindings.findChildViewById(rootView, id);
      if (mapsBottomNav == null) {
        break missingId;
      }

      id = R.id.mapsOnlienUserRecyclerview;
      RecyclerView mapsOnlienUserRecyclerview = ViewBindings.findChildViewById(rootView, id);
      if (mapsOnlienUserRecyclerview == null) {
        break missingId;
      }

      id = R.id.mapsProfileCategory;
      RecyclerView mapsProfileCategory = ViewBindings.findChildViewById(rootView, id);
      if (mapsProfileCategory == null) {
        break missingId;
      }

      id = R.id.mapsPublicContentRecyclerView;
      RecyclerView mapsPublicContentRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (mapsPublicContentRecyclerView == null) {
        break missingId;
      }

      id = R.id.mapsPublicProfilePostsCardView;
      CardView mapsPublicProfilePostsCardView = ViewBindings.findChildViewById(rootView, id);
      if (mapsPublicProfilePostsCardView == null) {
        break missingId;
      }

      id = R.id.mapsViewOnlineUserCardView;
      CardView mapsViewOnlineUserCardView = ViewBindings.findChildViewById(rootView, id);
      if (mapsViewOnlineUserCardView == null) {
        break missingId;
      }

      id = R.id.nearbyLocation;
      CircularImageView nearbyLocation = ViewBindings.findChildViewById(rootView, id);
      if (nearbyLocation == null) {
        break missingId;
      }

      id = R.id.searchEdittext;
      AutoCompleteTextView searchEdittext = ViewBindings.findChildViewById(rootView, id);
      if (searchEdittext == null) {
        break missingId;
      }

      id = R.id.searchSpinner;
      Spinner searchSpinner = ViewBindings.findChildViewById(rootView, id);
      if (searchSpinner == null) {
        break missingId;
      }

      id = R.id.searchTextInputLayout;
      LinearLayout searchTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (searchTextInputLayout == null) {
        break missingId;
      }

      return new ActivityMapsBinding((RelativeLayout) rootView, LogSearchIconGo, PAGiiSICON,
          discoverLayout, hideMapsPublicPostsCardView, hidePublicProfilesCardView, iconstand,
          mainContainer, map, mapsBottomNav, mapsOnlienUserRecyclerview, mapsProfileCategory,
          mapsPublicContentRecyclerView, mapsPublicProfilePostsCardView, mapsViewOnlineUserCardView,
          nearbyLocation, searchEdittext, searchSpinner, searchTextInputLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
